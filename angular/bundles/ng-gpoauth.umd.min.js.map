{"version":3,"sources":["ng://ng-gpoauth/GeoPlatformUser.ts","ng://ng-gpoauth/auth.ts","ng://ng-gpoauth/angular/interceptor.ts","ng://ng-gpoauth/angular/index.ts","ng://ng-gpoauth/index.ts"],"names":["GeoPlatformUser","opts","this","id","sub","username","name","email","org","orgs","groups","roles","exp","prototype","toJSON","JSON","parse","stringify","Object","assign","clone","compare","arg","isAuthorized","role","map","g","filter","n","length","getJson","url","jwt","axios","get","headers","Authorization","responseType","then","r","data","AuthService","config","ngMessenger","self","messenger","addEventListener","event","init","removeAuth","user","ALLOW_SSO_LOGIN","AUTH_TYPE","ssoCheck","getMessenger","saveToLocalStorage","key","value","localStorage","setItem","btoa","getFromLocalStorage","raw","getItem","atob","undefined","e","ssoURL","APP_BASE_URL","Date","getTime","ssoIframe","createIframe","remove","_this","FORCE_LOGIN","forceLogin","getJWT","setAuth","getJWTFromUrl","window","history","replaceState","location","href","replace","search","getUserFromJWT","iframe","document","createElement","style","display","src","body","appendChild","login","IDP_BASE_URL","APP_ID","encodeURIComponent","CALLBACK","ALLOW_IFRAME_LOGIN","broadcast","LOGIN_URL","logout","Promise","resolve","reject","LOGOUT_URL","catch","err","console","log","getOauthProfile","JWT","response","parseJwt","getUserSync","callback","isImplicitJWT","isExpired","check","getUser","on","rej","checkWithClient","originalJWT","Access-Control-Expose-Headers","resp","header","newJWT","trim","res","hash","toString","match","getJWTfromLocalStorage","clearLocalStorageJWT","removeItem","parsedJWT","implicit","token","parsed","base64","split","validateJwt","now","DefaultAuthConf","ALLOW_DEV_EDITS","TokenInterceptor","authService","intercept","request","next","setHeaders","handle","do","responseHandler","HttpResponse","urlJwt","headerJwt","newJwt","responseFailureHandler","HttpErrorResponse","status","Injectable","msgProvider","Subject","func","msg","subscribe","Event","ngGpoauthFactory$1"],"mappings":"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","sourcesContent":["import { JWT } from './authTypes'\n\n/**\n * Convience class representing a simplified user.\n *\n * @class GeoPlatformUser\n */\nexport class GeoPlatformUser  {\n    id      : string\n    username: string\n    name    : string\n    email   : string\n    org     : string\n    roles   : string\n    groups  : [{_id: string, name: string}]\n    exp     : number\n\n    constructor(opts: JWT) {\n      this.id = opts.sub\n      this.username = opts.username\n      this.name = opts.name\n      this.email = opts.email\n      this.org = opts.orgs[0] && opts.orgs[0].name\n      this.groups = opts.groups\n      this.roles = opts.roles\n      this.exp = opts.exp\n    }\n\n    toJSON() {\n      return JSON.parse(JSON.stringify(Object.assign({}, this)));\n    };\n\n    clone() {\n      return Object.assign({}, this)\n    };\n\n    compare(arg: any) {\n      if (arg instanceof GeoPlatformUser) {\n        return this.id === arg.id;\n      } else if (typeof(arg) === 'object') {\n        return typeof(arg.id) !== 'undefined' &&\n          arg.id === this.id;\n      }\n      return false;\n    };\n\n    isAuthorized(role: string) {\n      return this.groups &&\n              !!this.groups\n                      .map(g => g.name)\n                      .filter(n => n === role)\n                      .length;\n    };\n  }","import { ngMessenger, AuthConfig, JWT, UserProfile } from '../src/authTypes'\nimport { GeoPlatformUser } from './GeoPlatformUser'\nimport axios from 'axios'\n\nfunction getJson(url: string, jwt?: string) {\n  return axios.get(url, {\n                          headers: { 'Authorization' : jwt ? `Bearer ${jwt}` : '' },\n                          responseType: 'json'\n                        })\n                        .then(r => r.data);\n}\n\n/**\n * Authentication Service\n */\nexport class AuthService {\n\n  config: AuthConfig\n  messenger: ngMessenger\n\n  /**\n   *\n   * @class AuthService\n   * @constructor\n   *\n   * @param {AuthConfig} config\n   * @param\n   */\n  constructor(config: AuthConfig, ngMessenger: ngMessenger){\n    const self = this;\n    this.config = config;\n    this.messenger = ngMessenger\n\n    // Setup general event listeners that always run\n    addEventListener('message', (event: any) => {\n      // Handle User Authenticated\n      if(event.data === 'iframe:userAuthenticated'){\n        self.init() // will broadcast to angular (side-effect)\n      }\n\n      // Handle logout event\n      if(event.data === 'userSignOut'){\n        self.removeAuth()\n      }\n    })\n\n    const user = self.init()\n    if(this.config.ALLOW_SSO_LOGIN && !user && this.config.AUTH_TYPE === 'grant') self.ssoCheck()\n  }\n\n  /**\n   * Expose ngMessenger so that appliction code is able to\n   * subscribe to notifications sent by ng-gpoauth\n   */\n  getMessenger(): ngMessenger {\n    return this.messenger\n  }\n\n  /**\n   * Security wrapper for obfuscating values passed into local storage\n   */\n  private saveToLocalStorage(key: string, value: any) {\n    localStorage.setItem(key, btoa(value));\n  };\n\n  /**\n   * Retrieve and decode value from localstorage\n   *\n   * @param key\n   */\n  getFromLocalStorage(key: string): string {\n    const raw = localStorage.getItem(key)\n    try{\n      return raw ?\n              atob(raw) :\n              undefined;\n    } catch (e){ // Catch bad encoding or formally not encoded\n      return undefined;\n    }\n  };\n\n  private ssoCheck(): void {\n    const self = this;\n    const ssoURL = `${this.config.APP_BASE_URL}/login?sso=true&cachebuster=${(new Date()).getTime()}`\n    const ssoIframe = this.createIframe(ssoURL)\n\n    // Setup ssoIframe specific handlers\n    addEventListener('message', (event: any) => {\n      // Handle SSO login failure\n      if(event.data === 'iframe:ssoFailed'){\n        if(ssoIframe && ssoIframe.remove) // IE 11 - gotcha\n          ssoIframe.remove()\n        // Force login only after SSO has failed\n        if(this.config.FORCE_LOGIN) self.forceLogin()\n      }\n\n      // Handle User Authenticated\n      if(event.data === 'iframe:userAuthenticated'){\n        if(ssoIframe && ssoIframe.remove) // IE 11 - gotcha\n          ssoIframe.remove()\n      }\n    })\n  }\n\n  /**\n   * We keep this outside the constructor so that other services call\n   * call it to trigger the side-effects.\n   *\n   * @method init\n   */\n  private init(): GeoPlatformUser {\n    const jwt = this.getJWT();\n    if(jwt) this.setAuth(jwt)\n\n    //clean hosturl on redirect from oauth\n    if (this.getJWTFromUrl()) {\n      if(window.history && window.history.replaceState){\n        window.history.replaceState( {} , 'Remove token from URL', window.location.href.replace(/[\\?\\&]access_token=.*\\&token_type=Bearer/, '') )\n      } else {\n        window.location.search.replace(/[\\?\\&]access_token=.*\\&token_type=Bearer/, '')\n      }\n    }\n\n    return this.getUserFromJWT(jwt)\n  }\n\n  /**\n   * Create an invisable iframe and appends it to the bottom of the page.\n   *\n   * @method createIframe\n   * @returns {HTMLIFrameElement}\n   */\n  private createIframe(url: string): HTMLIFrameElement {\n    let iframe = document.createElement('iframe')\n\n    iframe.style.display = \"none\";\n    iframe.src = url\n    document.body.appendChild(iframe);\n\n    return iframe\n  };\n\n  /**\n   * Redirects or displays login window the page to the login site\n   */\n  login() {\n    // Check implicit we need to actually redirect them\n    if(this.config.AUTH_TYPE === 'token') {\n      window.location.href = this.config.IDP_BASE_URL +\n              `/auth/authorize?client_id=${this.config.APP_ID}` +\n              `&response_type=${this.config.AUTH_TYPE}` +\n              `&redirect_uri=${encodeURIComponent(this.config.CALLBACK || '/login')}`\n\n    // Otherwise pop up the login modal\n    } else {\n      // Iframe login\n      if(this.config.ALLOW_IFRAME_LOGIN){\n        this.messenger.broadcast('auth:requireLogin')\n\n        // Redirect login\n      } else {\n        window.location.href = this.config.LOGIN_URL\n                        || `/login?redirect_url=${encodeURIComponent(window.location.href)}`\n      }\n    }\n  };\n\n  /**\n   * Performs background logout and requests jwt revokation\n   */\n  logout(): Promise<void>{\n    const self = this;\n    // Create iframe to manually call the logout and remove gpoauth cookie\n    // https://stackoverflow.com/questions/13758207/why-is-passportjs-in-node-not-removing-session-on-logout#answer-33786899\n    // this.createIframe(`${this.config.IDP_BASE_URL}/auth/logout`)\n\n    // Save JWT to send with final request to revoke it\n    self.removeAuth() // purge the JWT\n\n    return new Promise((resolve, reject) => {\n      getJson(`${this.config.APP_BASE_URL}/revoke?sso=true`, this.getJWT())\n              .then(() => {\n                if(this.config.LOGOUT_URL) window.location.href = this.config.LOGOUT_URL\n                if(this.config.FORCE_LOGIN) self.forceLogin();\n                resolve();\n              })\n              .catch((err: Error) => {\n                console.log('Error logging out: ', err);\n                reject(err);\n              });\n    })\n\n  };\n\n  /**\n   * Optional force redirect for non-public services\n   */\n  forceLogin() {\n    this.login();\n  };\n\n  /**\n   * Get protected user profile\n   */\n  getOauthProfile(): Promise<UserProfile> {\n    const JWT = this.getJWT();\n\n    return new Promise<UserProfile>((resolve, reject) => {\n      //check to make sure we can make called\n      if (JWT) {\n        getJson(`${this.config.IDP_BASE_URL}/api/profile`, JWT)\n          .then((response: UserProfile) =>  resolve(response))\n          .catch(err => reject(err))\n      } else {\n        reject(null)\n      }\n\n    })\n  };\n\n  /**\n   * Get User object from the JWT.\n   *\n   * If no JWT is provided it will be looked for at the normal JWT\n   * locations (localStorage or URL queryString).\n   *\n   * @param {JWT} [jwt] - the JWT to extract user from.\n   */\n  getUserFromJWT(jwt: string): GeoPlatformUser {\n    const user = this.parseJwt(jwt)\n    return user ?\n            new GeoPlatformUser(Object.assign({}, user, { id: user.sub })) :\n            null;\n  }\n\n  /**\n   * If the callback parameter is specified, this method\n   * will return undefined. Otherwise, it returns the user (or null).\n   *\n   * Side Effects:\n   *  - Will redirect users if no valid JWT was found\n   *\n   * @param callback optional function to invoke with the user\n   * @return object representing current user\n   */\n  getUserSync(callback?: (user: GeoPlatformUser) => any): GeoPlatformUser {\n    const jwt = this.getJWT();\n    // If callback provided we can treat async and call server\n    if(callback && typeof(callback) === 'function'){\n      this.check()\n      .then(user => callback(user));\n\n      // If no callback we have to provide a sync response (no network)\n    } else {\n      // We allow front end to get user data if grant type and expired\n      // because they will recieve a new token automatically when\n      // making a call to the client(application)\n      return this.isImplicitJWT(jwt) && this.isExpired(jwt) ?\n              null :\n              this.getUserFromJWT(jwt);\n    }\n  }\n\n  /**\n   * Promise version of get user.\n   *\n   * Below is a table of how this function handels this method with\n   * differnt configurations.\n   *  - FORCE_LOGIN : Horizontal\n   *  - ALLOW_IFRAME_LOGIN : Vertical\n   *\n   *\n   * getUser  | T | F (FORCE_LOGIN)\n   * -----------------------------\n   * T        | 1 | 2\n   * F        | 3 | 4\n   * (ALLOW_IFRAME_LOGIN)\n   *\n   * Cases:\n   * 1. Delay resolve function till user is logged in\n   * 2. Return null (if user not authorized)\n   * 3. Force the redirect\n   * 4. Return null (if user not authorized)\n   *\n   * NOTE:\n   * Case 1 above will cause this method's promise to be a long stall\n   * until the user completes the login process. This should allow the\n   * app to forgo a reload is it should have waited till the entire\n   * time till the user was successfully logged in.\n   *\n   * @method getUser\n   *\n   * @returns {Promise<User>} User - the authenticated user\n   */\n  getUser(): Promise<GeoPlatformUser | null> {\n    const self = this;\n\n    // For basic testing\n    // this.messenger.broadcast('userAuthenticated', { name: 'username'})\n\n    return new Promise<GeoPlatformUser | null>((resolve, reject) => {\n      this.check()\n      .then(user => {\n        if(user) {\n          resolve(user)\n        } else {\n          // Case 1 - ALLOW_IFRAME_LOGIN: true | FORCE_LOGIN: true\n          if(this.config.ALLOW_IFRAME_LOGIN && this.config.FORCE_LOGIN){\n            // Resolve with user once they have logged in\n            this.messenger.on('userAuthenticated', (event: Event, user: GeoPlatformUser) => {\n              resolve(user)\n            })\n          }\n          // Case 2 - ALLOW_IFRAME_LOGIN: true | FORCE_LOGIN: false\n          if(this.config.ALLOW_IFRAME_LOGIN && !this.config.FORCE_LOGIN){\n            resolve(null)\n          }\n          // Case 3 - ALLOW_IFRAME_LOGIN: false | FORCE_LOGIN: true\n          if(!this.config.ALLOW_IFRAME_LOGIN && this.config.FORCE_LOGIN){\n            addEventListener('message', (event: any) => {\n              // Handle SSO login failure\n              if(event.data === 'iframe:ssoFailed'){\n                resolve(self.getUser())\n              }\n            })\n            resolve(null)\n          }\n          // Case 4 - ALLOW_IFRAME_LOGIN: false | FORCE_LOGIN: false\n          if(!this.config.ALLOW_IFRAME_LOGIN && !this.config.FORCE_LOGIN){\n            resolve(null) // or reject?\n          }\n        }\n      })\n      .catch((err: Error) => console.log(err))\n    })\n  };\n\n  /**\n   * Check function being used by some front end apps already.\n   * (wrapper for getUser)\n   *\n   * @method check\n   * @returns {User} - ng-common user object or null\n   */\n  check(): Promise<GeoPlatformUser>{\n    return new Promise((resolve, rej) => {\n      const jwt = this.getJWT();\n\n      // If no local JWT\n      if(!jwt)\n        return this.checkWithClient(\"\")\n                   .then(jwt => jwt.length ? this.getUserFromJWT(jwt) : null);\n\n      if(!jwt) return resolve(null);\n      if(!this.isImplicitJWT(jwt)){ // Grant token\n        return this.isExpired(jwt) ?\n                this.checkWithClient(jwt)\n                  .then(jwt => this.getUserFromJWT(jwt)) : // Check with server\n                  resolve(this.getUserFromJWT(jwt));\n      } else { // Implicit JWT\n        return this.isExpired(jwt) ?\n                Promise.reject(null) :\n                resolve(this.getUserFromJWT(jwt));\n      }\n    })\n  }\n\n  /**\n   * Makes a call to a service hosting node-gpoauth to allow for a\n   * token refresh on an expired token, or a token that has been\n   * invalidated to be revoked.\n   *\n   * Note: Client as in hosting application:\n   *    https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2\n   *\n   * @method checkWithClient\n   * @param {jwt} - encoded accessToken/JWT\n   *\n   * @return {Promise<jwt>} - promise resolving with a JWT\n   */\n  checkWithClient(originalJWT: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if(this.config.AUTH_TYPE === 'token'){\n        resolve(null)\n      } else {\n\n        axios(`${this.config.APP_BASE_URL}/checktoken`, {\n          headers: {\n            'Authorization' : originalJWT ? `Bearer ${originalJWT}` : '',\n            'Access-Control-Expose-Headers': 'Authorization, WWW-Authorization, content-length'\n          }\n        })\n        .then(resp => {\n          const header = resp.headers['authorization']\n          const newJWT = header && header.replace('Bearer','').trim();\n\n          if(header && newJWT.length)\n            this.setAuth(newJWT);\n          resolve(newJWT ? newJWT : originalJWT);\n        })\n        .catch(err => reject(err));\n      }\n    })\n  }\n\n  //=====================================================\n\n  /**\n   * Extract token from current URL\n   *\n   * @method getJWTFromUrl\n   *\n   * @return {String | undefined} - JWT Token (raw string)\n   */\n  getJWTFromUrl(): string {\n    const queryString = (window && window.location && window.location.hash) ?\n                          window.location.hash :\n                          window.location.toString();\n    const res = queryString.match(/access_token=([^\\&]*)/);\n    return res && res[1];\n  };\n\n  /**\n   * Load the JWT stored in local storage.\n   *\n   * @method getJWTfromLocalStorage\n   *\n   * @return {JWT | undefined} An object wih the following format:\n   */\n  getJWTfromLocalStorage(): string {\n    return this.getFromLocalStorage('gpoauthJWT')\n  };\n\n  /**\n   * Attempt and pull JWT from the following locations (in order):\n   *  - URL query parameter 'access_token' (returned from IDP)\n   *  - Browser local storage (saved from previous request)\n   *\n   * @method getJWT\n   *\n   * @return {sting | undefined}\n   */\n  getJWT(): string {\n    const jwt = this.getJWTFromUrl() || this.getJWTfromLocalStorage()\n    // Only deny implicit tokens that have expired\n    if(!jwt || (jwt && this.isImplicitJWT(jwt) && this.isExpired(jwt))) {\n      return null;\n    } else {\n      return jwt;\n    }\n  };\n\n  /**\n   * Remove the JWT saved in local storge.\n   *\n   * @method clearLocalStorageJWT\n   *\n   * @return  {undefined}\n   */\n  private clearLocalStorageJWT(): void {\n    localStorage.removeItem('gpoauthJWT')\n  };\n\n  /**\n   * Is a token expired.\n   *\n   * @method isExpired\n   * @param {JWT} jwt - A JWT\n   *\n   * @return {boolean}\n   */\n  isExpired(jwt: string): boolean {\n    const parsedJWT = this.parseJwt(jwt)\n    if(parsedJWT){\n      const now = (new Date()).getTime() / 1000;\n      return now > parsedJWT.exp;\n    }\n    return true\n  };\n\n  /**\n   * Is the JWT an implicit JWT?\n   * @param jwt\n   */\n  isImplicitJWT(jwt: string): boolean {\n    const parsedJWT = this.parseJwt(jwt)\n    return parsedJWT && parsedJWT.implicit;\n  }\n\n  /**\n   * Unsafe (signature not checked) unpacking of JWT.\n   *\n   * @param {string} token - Access Token (JWT)\n   * @return {Object} the parsed payload in the JWT\n   */\n  parseJwt(token: string): JWT {\n    var parsed;\n    if (token) {\n      try {\n        var base64Url = token.split('.')[1];\n        var base64 = base64Url.replace('-', '+').replace('_', '/');\n        parsed = JSON.parse(atob(base64));\n      } catch(e) { /* Don't throw parse error */ }\n    }\n    return parsed;\n  };\n\n  /**\n   * Simple front end validion to verify JWT is complete and not\n   * expired.\n   *\n   * Note:\n   *  Signature validation is the only truly save method. This is done\n   *  automatically in the node-gpoauth module.\n   */\n  validateJwt(token: string): boolean {\n    var parsed = this.parseJwt(token);\n    var valid = (parsed && parsed.exp && parsed.exp * 1000 > Date.now()) ? true : false;\n    return valid;\n  };\n\n  /**\n   * Save JWT to localStorage and in the request headers for accessing\n   * protected resources.\n   *\n   * @param {JWT} jwt\n   */\n  public setAuth(jwt: string): void {\n    this.saveToLocalStorage('gpoauthJWT', jwt)\n    this.messenger.broadcast(\"userAuthenticated\", this.getUserFromJWT(jwt))\n  };\n\n  /**\n   * Purge the JWT from localStorage and authorization headers.\n   */\n  private removeAuth(): void {\n    localStorage.removeItem('gpoauthJWT')\n    // Send null user as well (backwards compatability)\n    this.messenger.broadcast(\"userAuthenticated\", null)\n    this.messenger.broadcast(\"userSignOut\")\n  };\n}\n\n\nexport const DefaultAuthConf: AuthConfig = {\n  AUTH_TYPE: 'grant',\n  APP_BASE_URL: '', // absolute path // use . for relative path\n  ALLOW_IFRAME_LOGIN: true,\n  FORCE_LOGIN: false,\n  ALLOW_DEV_EDITS: false,\n  ALLOW_SSO_LOGIN: true\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpResponse,\n  HttpHandler,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../auth';\n\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService) {}\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        // TODO: we need to check for expiration and do a preflight to\n        // /checktoken if the current token is expired\n\n        // ====== For sending token (with request) ======//\n\n        const jwt = this.authService.getJWT();\n        if(jwt){\n            // Send our current token\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${jwt}`\n                }\n            });\n        }\n\n        // ====== For sending token (with request) ======//\n\n        /**\n         * Handler for successful responses returned from the server.\n         * This function must to the following:\n         *  - check the URL for a JWT\n         *  - check the 'Authorization' header for a JWT\n         *  - set a new JWT in AuthService\n         *\n         * @param {HttpEvent<any>} resp - response from server\n         */\n        function responseHandler(event: HttpEvent<any>){\n            if (event instanceof HttpResponse) {\n                // look for JWT in URL\n                const urlJwt = this.authService.getJWTFromUrl();\n\n                // look for JWT in auth headers\n                const headerJwt = event.headers.get('Authorization')\n                                            .replace('Bearer', '')\n                                            .trim();\n\n                const newJwt = urlJwt || headerJwt;\n\n                if(newJwt)\n                    this.authService.setAuth(newJwt)\n\n                // TODO: may want to look at revoking if:\n                //  'Authorization' : 'Bearer '\n                // comes back from server....\n            }\n        }\n\n        /**\n         * The is the error handler when an unauthenticated request\n         * comes back from the server...\n         *\n         * @param {Error} err - Error from server\n         */\n        function responseFailureHandler(err: any){\n            if (err instanceof HttpErrorResponse) {\n                if (err.status === 401) {\n                    // Should we check if forceLogin is set and force them???\n                }\n            }\n        }\n\n        // ==============================================//\n\n        // setup and return with handlers\n        return next\n                .handle(request)\n                .do(responseHandler, responseFailureHandler);\n  }\n}","/**\n * For Angluar 2+ (TypeScript)\n */\nimport { MSG, ngMessenger, AuthConfig, authMessage } from '../authTypes'\nimport { AuthService, DefaultAuthConf } from '../auth'\nimport { GeoPlatformUser } from '../GeoPlatformUser'\n\nimport { Subject } from 'rxjs'\n\n// Setup messageProvider\n\nexport class msgProvider implements ngMessenger<Subject<MSG>> {\n    sub: Subject<MSG>\n\n    constructor(){\n        this.sub = new Subject<MSG>();\n    }\n\n    raw(){\n        return this.sub;\n    }\n\n    broadcast(name: authMessage, user: GeoPlatformUser){\n        this.sub.next({name, user})\n    }\n\n    on(name: authMessage, func: (e: Event, data: GeoPlatformUser) => any){\n        this.sub\n            .filter(msg => msg.name === name)\n            .subscribe(msg => func(new Event(msg.name), msg.user))\n    }\n}\n\n\n/**\n * Expose the class that can be loaded in Angular\n *\n * TODO: allow differnt types here:\n *  - Observible\n *  - Promise\n *  - Object\n */\nexport function ngGpoauthFactory(config?: AuthConfig): AuthService {\n    return new AuthService(Object.assign({}, DefaultAuthConf, config),  new msgProvider())\n}\n\n// Expose internal types\nexport { AuthService } from '../auth'\nexport { GeoPlatformUser } from '../GeoPlatformUser'\nexport { TokenInterceptor } from './interceptor'","import { AuthService, DefaultAuthConf } from './auth'\nimport { AuthConfig } from './authTypes'\nimport { msgProvider } from './angular/index'\n\n/**\n * Expose the class that can be loaded in Angular\n *\n * TODO: allow differnt types here:\n *  - Observible\n *  - Promise\n *  - Object\n */\nexport function ngGpoauthFactory(config?: AuthConfig): AuthService {\n    return new AuthService(Object.assign({}, DefaultAuthConf, config),  new msgProvider())\n}\n\n// Expose internal types\nexport { AuthService } from './auth'\nexport { GeoPlatformUser } from './GeoPlatformUser'\nexport { TokenInterceptor } from './angular/interceptor'"]}