import { Subject } from 'rxjs';
import { GeoPlatformUser, AuthService, DefaultAuthConf } from '@geoplatform/oauth-ng';
/**
 * Angular implementation of message handler
 */
class msgProvider {
    constructor() {
        this.sub = new Subject();
    }
    raw() {
        return this.sub;
    }
    broadcast(name, user) {
        this.sub.next({ name, user });
    }
    on(name, func) {
        this.sub
            .filter(msg => msg.name === name)
            .subscribe(msg => func(new Event(msg.name), msg.user));
    }
}
/**
 * Expose the class that can be loaded in Angular
 *
 * TODO: allow differnt types here:
 *  - Observible
 *  - Promise
 *  - Object
 */
function ngGpoauthFactory(config) {
    return new AuthService(Object.assign({}, DefaultAuthConf, config), new msgProvider());
}
// Expose API for consumption
export { AuthService, GeoPlatformUser, ngGpoauthFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ2VvcGxhdGZvcm0vb2F1dGgtbmcvYW5ndWxhci8iLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDOUIsT0FBTyxFQUlFLGVBQWUsRUFDZixXQUFXLEVBQ1gsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFFdkQ7O0dBRUc7QUFDSCxNQUFNLFdBQVc7SUFHYjtRQUNJLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQUNsQyxDQUFDO0lBRUQsR0FBRztRQUNDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQWlCLEVBQUUsSUFBcUI7UUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRUQsRUFBRSxDQUFDLElBQWlCLEVBQUUsSUFBOEM7UUFDaEUsSUFBSSxDQUFDLEdBQUc7YUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQzthQUNoQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7Q0FDSjtBQUVEOzs7Ozs7O0dBT0c7QUFDSCxTQUFTLGdCQUFnQixDQUFDLE1BQW1CO0lBQ3pDLE9BQU8sSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFHLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQTtBQUMxRixDQUFDO0FBRUQsNkJBQTZCO0FBQzdCLE9BQU8sRUFBRSxXQUFXLEVBRVgsZUFBZSxFQUNmLGdCQUFnQixFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcydcbmltcG9ydCB7IE1TR1xuICAgICAgICwgTWVzc2VuZ2VyXG4gICAgICAgLCBhdXRoTWVzc2FnZVxuICAgICAgICwgQXV0aENvbmZpZ1xuICAgICAgICwgR2VvUGxhdGZvcm1Vc2VyXG4gICAgICAgLCBBdXRoU2VydmljZVxuICAgICAgICwgRGVmYXVsdEF1dGhDb25mIH0gZnJvbSAnQGdlb3BsYXRmb3JtL29hdXRoLW5nJ1xuXG4vKipcbiAqIEFuZ3VsYXIgaW1wbGVtZW50YXRpb24gb2YgbWVzc2FnZSBoYW5kbGVyXG4gKi9cbmNsYXNzIG1zZ1Byb3ZpZGVyIGltcGxlbWVudHMgTWVzc2VuZ2VyPFN1YmplY3Q8TVNHPj4ge1xuICAgIHN1YjogU3ViamVjdDxNU0c+XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLnN1YiA9IG5ldyBTdWJqZWN0PE1TRz4oKTtcbiAgICB9XG5cbiAgICByYXcoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViO1xuICAgIH1cblxuICAgIGJyb2FkY2FzdChuYW1lOiBhdXRoTWVzc2FnZSwgdXNlcjogR2VvUGxhdGZvcm1Vc2VyKXtcbiAgICAgICAgdGhpcy5zdWIubmV4dCh7bmFtZSwgdXNlcn0pXG4gICAgfVxuXG4gICAgb24obmFtZTogYXV0aE1lc3NhZ2UsIGZ1bmM6IChlOiBFdmVudCwgZGF0YTogR2VvUGxhdGZvcm1Vc2VyKSA9PiBhbnkpe1xuICAgICAgICB0aGlzLnN1YlxuICAgICAgICAgICAgLmZpbHRlcihtc2cgPT4gbXNnLm5hbWUgPT09IG5hbWUpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKG1zZyA9PiBmdW5jKG5ldyBFdmVudChtc2cubmFtZSksIG1zZy51c2VyKSlcbiAgICB9XG59XG5cbi8qKlxuICogRXhwb3NlIHRoZSBjbGFzcyB0aGF0IGNhbiBiZSBsb2FkZWQgaW4gQW5ndWxhclxuICpcbiAqIFRPRE86IGFsbG93IGRpZmZlcm50IHR5cGVzIGhlcmU6XG4gKiAgLSBPYnNlcnZpYmxlXG4gKiAgLSBQcm9taXNlXG4gKiAgLSBPYmplY3RcbiAqL1xuZnVuY3Rpb24gbmdHcG9hdXRoRmFjdG9yeShjb25maWc/OiBBdXRoQ29uZmlnKTogQXV0aFNlcnZpY2Uge1xuICAgIHJldHVybiBuZXcgQXV0aFNlcnZpY2UoT2JqZWN0LmFzc2lnbih7fSwgRGVmYXVsdEF1dGhDb25mLCBjb25maWcpLCAgbmV3IG1zZ1Byb3ZpZGVyKCkpXG59XG5cbi8vIEV4cG9zZSBBUEkgZm9yIGNvbnN1bXB0aW9uXG5leHBvcnQgeyBBdXRoU2VydmljZVxuICAgICAgICwgQXV0aENvbmZpZ1xuICAgICAgICwgR2VvUGxhdGZvcm1Vc2VyXG4gICAgICAgLCBuZ0dwb2F1dGhGYWN0b3J5IH0iXX0=